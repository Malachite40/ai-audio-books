generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String    @id
    name             String
    email            String
    emailVerified    Boolean
    stripeCustomerId String?
    image            String?
    createdAt        DateTime
    updatedAt        DateTime
    sessions         Session[]
    accounts         Account[]

    role       String?
    banned     Boolean?
    banReason  String?
    banExpires DateTime?

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String?

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Speaker {
    id               String   @id @default(uuid())
    name             String
    image            String?
    gptCondLatent    Json
    speakerEmbedding Json
    createdAt        DateTime @default(now()) @db.Timestamptz()
    updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz()
}

enum AudioFileStatus {
    PENDING
    PROCESSING
    PROCESSED
    ERROR
}

model AudioFile {
    id          String          @id @default(uuid())
    status      AudioFileStatus @default(PENDING)
    createdAt   DateTime        @default(now()) @db.Timestamptz()
    updatedAt   DateTime        @default(now()) @updatedAt @db.Timestamptz()
    AudioChunks AudioChunk[]
}

enum AudioChunkStatus {
    PENDING
    PROCESSING
    PROCESSED
    ERROR
}

model AudioChunk {
    id          String           @id @default(uuid())
    sequence    Int
    text        String
    status      AudioChunkStatus @default(PENDING)
    createdAt   DateTime         @default(now()) @db.Timestamptz()
    updatedAt   DateTime         @default(now()) @updatedAt @db.Timestamptz()
    audioFileId String
    audioFile   AudioFile        @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

    @@unique([audioFileId, sequence])
}
