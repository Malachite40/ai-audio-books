generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

model SupportSubmission {
    id          String   @id @default(uuid())
    name        String
    description String
    createdAt   DateTime @default(now()) @db.Timestamptz()
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String    @id
    name             String
    email            String
    emailVerified    Boolean
    stripeCustomerId String?
    image            String?
    createdAt        DateTime
    updatedAt        DateTime
    sessions         Session[]
    accounts         Account[]

    role              String?
    banned            Boolean?
    banReason         String?
    banExpires        DateTime?
    Credits           Credits?
    AudioFile         AudioFile[]
    Subscription      Subscriptions?
    AudioFileSettings AudioFileSettings[]
    UserAudioFile     UserAudioFile[]

    @@unique([email])
    @@index([stripeCustomerId])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String?

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Speaker {
    id           String      @id @default(uuid())
    name         String
    order        Int?
    exampleAudio String?
    image        String?
    createdAt    DateTime    @default(now()) @db.Timestamptz()
    updatedAt    DateTime    @default(now()) @updatedAt @db.Timestamptz()
    AudioFiles   AudioFile[]
}

enum AudioFileStatus {
    PENDING
    GENERATING_STORY
    PROCESSING
    PROCESSED
    ERROR
}

model AudioFile {
    id                String              @id @default(uuid())
    ownerId           String?
    name              String              @default("")
    text              String              @default("")
    imageUrl          String?
    owner             User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    status            AudioFileStatus     @default(PENDING)
    speakerId         String
    durationMs        Int                 @default(0)
    speaker           Speaker             @relation(fields: [speakerId], references: [id], onDelete: Cascade)
    public            Boolean             @default(false)
    lang              String              @default("en")
    createdAt         DateTime            @default(now()) @db.Timestamptz()
    updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz()
    deletedAt         DateTime?           @db.Timestamptz()
    AudioChunks       AudioChunk[]
    AudioFileSettings AudioFileSettings[]
    UserAudioFile     UserAudioFile[]
}

enum AudioChunkStatus {
    PENDING
    PROCESSING
    PROCESSED
    ERROR
}

model AudioChunk {
    id             String           @id @default(uuid())
    sequence       Int
    url            String?
    text           String
    durationMs     Int              @default(0)
    paddingStartMs Int              @default(0)
    paddingEndMs   Int              @default(0)
    status         AudioChunkStatus @default(PENDING)
    createdAt      DateTime         @default(now()) @db.Timestamptz()
    updatedAt      DateTime         @default(now()) @updatedAt @db.Timestamptz()
    audioFileId    String
    audioFile      AudioFile        @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

    @@unique([audioFileId, sequence])
}

enum SubscriptionPlans {
    FREE
    BASIC
    PRO
}

model Subscriptions {
    id                   String            @id @default(uuid())
    userId               String            @unique
    plan                 SubscriptionPlans
    stripeSubscriptionId String?
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @default(now()) @updatedAt

    User User @relation(fields: [userId], references: [id])
}

model Credits {
    userId    String   @id @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount    Int
    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
}

model AudioFileSettings {
    audioFileId String
    audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
    currentTime Float     @default(1.0)
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now()) @db.Timestamptz()
    updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz()

    @@id([audioFileId, userId])
}

model KeyValueStore {
    id        String   @id @default(uuid())
    key       String   @unique
    value     String
    createdAt DateTime @default(now()) @db.Timestamptz
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

model UserAudioFile {
    userId      String
    audioFileId String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)

    @@id([userId, audioFileId])
}
